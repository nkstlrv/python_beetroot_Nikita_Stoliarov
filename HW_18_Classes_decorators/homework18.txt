Task 1

Create a class method named `validate`, which should be called from the `__init__` method to validate parameter email,
passed to the constructor. 
The logic inside the `validate` method could be to check if the passed email parameter is a valid email string.

Email validations:

Valid email address format 

Email address 

 

Task 2

Implement 2 classes, the first one is the Boss and the second one is the Worker.

Worker has a property 'boss', and its value must be an instance of Boss.

You can reassign this value, but you should check whether the new value is Boss. 
Each Boss has a list of his own workers. 
You should implement a method that allows you to add workers to a Boss. 
You're not allowed to add instances of Boss class to workers list directly via access to attribute, use getters and setters instead!

You can refactor the existing code.

```

id_ - is just a random unique integer

 

class Boss:

    def __init__(self, id_: int, name: str, company: str):

        self.id = id_

        self.name = name

        self.company = company

        self.workers = []

 

class Worker:

    def __init__(self, id_: int, name: str, company: str, boss: Boss):

        self.id = id_

        self.name = name

        self.company = company

        self.boss = boss

```

Task 3

Write a class TypeDecorators which has several methods for converting results of functions to a specified type (if it's possible):

methods:

to_int

to_str

to_bool

to_float

 

Don't forget to use @wraps

```

class TypeDecorators:

    pass

 

@TypeDecorators.to_int

def do_nothing(string: str):

    return string

 

@TypeDecorators.to_bool

def do_something(string: str):

    return string

 

assert do_nothing('25') == 25

assert do_something('True') is True

```